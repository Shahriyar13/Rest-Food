// Generated by Dagger (https://dagger.dev).
package com.example.template.di;

import androidx.lifecycle.ViewModel;
import com.example.template.base.BaseViewModel;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class ApplicationModule_ProvideBaseViewModelFactory implements Factory<BaseViewModel> {
  private final ApplicationModule module;

  private final Provider<ViewModel> viewModelProvider;

  public ApplicationModule_ProvideBaseViewModelFactory(ApplicationModule module,
      Provider<ViewModel> viewModelProvider) {
    this.module = module;
    this.viewModelProvider = viewModelProvider;
  }

  @Override
  public BaseViewModel get() {
    return provideBaseViewModel(module, viewModelProvider.get());
  }

  public static ApplicationModule_ProvideBaseViewModelFactory create(ApplicationModule module,
      Provider<ViewModel> viewModelProvider) {
    return new ApplicationModule_ProvideBaseViewModelFactory(module, viewModelProvider);
  }

  public static BaseViewModel provideBaseViewModel(ApplicationModule instance,
      ViewModel viewModel) {
    return Preconditions.checkNotNullFromProvides(instance.provideBaseViewModel(viewModel));
  }
}
