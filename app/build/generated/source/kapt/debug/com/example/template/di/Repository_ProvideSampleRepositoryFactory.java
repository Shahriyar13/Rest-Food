// Generated by Dagger (https://dagger.dev).
package com.example.template.di;

import com.example.template.data.datasource.cities.CitiesLocalDataSource;
import com.example.template.data.datasource.foods.FoodsLocalDataSource;
import com.example.template.data.datasource.updatelist.FoodsAndCitiesRemoteDataSource;
import com.example.template.domain.repository.feature_a.UpdateListRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class Repository_ProvideSampleRepositoryFactory implements Factory<UpdateListRepository> {
  private final Repository module;

  private final Provider<CitiesLocalDataSource> citiesLocalDataSourceProvider;

  private final Provider<FoodsLocalDataSource> foodsLocalDataSourceProvider;

  private final Provider<FoodsAndCitiesRemoteDataSource> remoteDataSourceProvider;

  public Repository_ProvideSampleRepositoryFactory(Repository module,
      Provider<CitiesLocalDataSource> citiesLocalDataSourceProvider,
      Provider<FoodsLocalDataSource> foodsLocalDataSourceProvider,
      Provider<FoodsAndCitiesRemoteDataSource> remoteDataSourceProvider) {
    this.module = module;
    this.citiesLocalDataSourceProvider = citiesLocalDataSourceProvider;
    this.foodsLocalDataSourceProvider = foodsLocalDataSourceProvider;
    this.remoteDataSourceProvider = remoteDataSourceProvider;
  }

  @Override
  public UpdateListRepository get() {
    return provideSampleRepository(module, citiesLocalDataSourceProvider.get(), foodsLocalDataSourceProvider.get(), remoteDataSourceProvider.get());
  }

  public static Repository_ProvideSampleRepositoryFactory create(Repository module,
      Provider<CitiesLocalDataSource> citiesLocalDataSourceProvider,
      Provider<FoodsLocalDataSource> foodsLocalDataSourceProvider,
      Provider<FoodsAndCitiesRemoteDataSource> remoteDataSourceProvider) {
    return new Repository_ProvideSampleRepositoryFactory(module, citiesLocalDataSourceProvider, foodsLocalDataSourceProvider, remoteDataSourceProvider);
  }

  public static UpdateListRepository provideSampleRepository(Repository instance,
      CitiesLocalDataSource citiesLocalDataSource, FoodsLocalDataSource foodsLocalDataSource,
      FoodsAndCitiesRemoteDataSource remoteDataSource) {
    return Preconditions.checkNotNullFromProvides(instance.provideSampleRepository(citiesLocalDataSource, foodsLocalDataSource, remoteDataSource));
  }
}
