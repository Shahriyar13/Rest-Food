// Generated by Dagger (https://dagger.dev).
package com.example.template.ui.home;

import com.example.template.domain.usecase.cities.CitiesUseCase;
import com.example.template.domain.usecase.fetchdata.UpdateListUseCase;
import com.example.template.domain.usecase.foods.FoodsUseCase;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class HomeViewModel_Factory implements Factory<HomeViewModel> {
  private final Provider<UpdateListUseCase> updateListUseCaseProvider;

  private final Provider<CitiesUseCase> citiesUseCaseProvider;

  private final Provider<FoodsUseCase> foodsUseCaseProvider;

  public HomeViewModel_Factory(Provider<UpdateListUseCase> updateListUseCaseProvider,
      Provider<CitiesUseCase> citiesUseCaseProvider, Provider<FoodsUseCase> foodsUseCaseProvider) {
    this.updateListUseCaseProvider = updateListUseCaseProvider;
    this.citiesUseCaseProvider = citiesUseCaseProvider;
    this.foodsUseCaseProvider = foodsUseCaseProvider;
  }

  @Override
  public HomeViewModel get() {
    return newInstance(updateListUseCaseProvider.get(), citiesUseCaseProvider.get(), foodsUseCaseProvider.get());
  }

  public static HomeViewModel_Factory create(Provider<UpdateListUseCase> updateListUseCaseProvider,
      Provider<CitiesUseCase> citiesUseCaseProvider, Provider<FoodsUseCase> foodsUseCaseProvider) {
    return new HomeViewModel_Factory(updateListUseCaseProvider, citiesUseCaseProvider, foodsUseCaseProvider);
  }

  public static HomeViewModel newInstance(UpdateListUseCase updateListUseCase,
      CitiesUseCase citiesUseCase, FoodsUseCase foodsUseCase) {
    return new HomeViewModel(updateListUseCase, citiesUseCase, foodsUseCase);
  }
}
