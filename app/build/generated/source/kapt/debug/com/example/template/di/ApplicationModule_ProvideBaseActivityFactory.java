// Generated by Dagger (https://dagger.dev).
package com.example.template.di;

import android.app.Activity;
import com.example.template.base.BaseActivity;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class ApplicationModule_ProvideBaseActivityFactory implements Factory<BaseActivity> {
  private final ApplicationModule module;

  private final Provider<Activity> activityProvider;

  public ApplicationModule_ProvideBaseActivityFactory(ApplicationModule module,
      Provider<Activity> activityProvider) {
    this.module = module;
    this.activityProvider = activityProvider;
  }

  @Override
  public BaseActivity get() {
    return provideBaseActivity(module, activityProvider.get());
  }

  public static ApplicationModule_ProvideBaseActivityFactory create(ApplicationModule module,
      Provider<Activity> activityProvider) {
    return new ApplicationModule_ProvideBaseActivityFactory(module, activityProvider);
  }

  public static BaseActivity provideBaseActivity(ApplicationModule instance, Activity activity) {
    return Preconditions.checkNotNullFromProvides(instance.provideBaseActivity(activity));
  }
}
