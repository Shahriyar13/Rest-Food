// Generated by Dagger (https://dagger.dev).
package com.example.template.di;

import android.content.Context;
import com.example.template.App;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class ApplicationModule_ProvideContextFactory implements Factory<Context> {
  private final ApplicationModule module;

  private final Provider<App> applicationProvider;

  public ApplicationModule_ProvideContextFactory(ApplicationModule module,
      Provider<App> applicationProvider) {
    this.module = module;
    this.applicationProvider = applicationProvider;
  }

  @Override
  public Context get() {
    return provideContext(module, applicationProvider.get());
  }

  public static ApplicationModule_ProvideContextFactory create(ApplicationModule module,
      Provider<App> applicationProvider) {
    return new ApplicationModule_ProvideContextFactory(module, applicationProvider);
  }

  public static Context provideContext(ApplicationModule instance, App application) {
    return Preconditions.checkNotNullFromProvides(instance.provideContext(application));
  }
}
