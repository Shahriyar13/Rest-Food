// Generated by Dagger (https://dagger.dev).
package com.example.template.di;

import androidx.fragment.app.Fragment;
import com.example.template.base.BaseFragment;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class ApplicationModule_ProvideBaseFragmentFactory implements Factory<BaseFragment> {
  private final ApplicationModule module;

  private final Provider<Fragment> fragmentProvider;

  public ApplicationModule_ProvideBaseFragmentFactory(ApplicationModule module,
      Provider<Fragment> fragmentProvider) {
    this.module = module;
    this.fragmentProvider = fragmentProvider;
  }

  @Override
  public BaseFragment get() {
    return provideBaseFragment(module, fragmentProvider.get());
  }

  public static ApplicationModule_ProvideBaseFragmentFactory create(ApplicationModule module,
      Provider<Fragment> fragmentProvider) {
    return new ApplicationModule_ProvideBaseFragmentFactory(module, fragmentProvider);
  }

  public static BaseFragment provideBaseFragment(ApplicationModule instance, Fragment fragment) {
    return Preconditions.checkNotNullFromProvides(instance.provideBaseFragment(fragment));
  }
}
