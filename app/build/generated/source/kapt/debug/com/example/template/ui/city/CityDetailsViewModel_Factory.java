// Generated by Dagger (https://dagger.dev).
package com.example.template.ui.city;

import com.example.template.domain.usecase.cities.CitiesUseCase;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class CityDetailsViewModel_Factory implements Factory<CityDetailsViewModel> {
  private final Provider<CitiesUseCase> cityUseCaseProvider;

  public CityDetailsViewModel_Factory(Provider<CitiesUseCase> cityUseCaseProvider) {
    this.cityUseCaseProvider = cityUseCaseProvider;
  }

  @Override
  public CityDetailsViewModel get() {
    return newInstance(cityUseCaseProvider.get());
  }

  public static CityDetailsViewModel_Factory create(Provider<CitiesUseCase> cityUseCaseProvider) {
    return new CityDetailsViewModel_Factory(cityUseCaseProvider);
  }

  public static CityDetailsViewModel newInstance(CitiesUseCase cityUseCase) {
    return new CityDetailsViewModel(cityUseCase);
  }
}
