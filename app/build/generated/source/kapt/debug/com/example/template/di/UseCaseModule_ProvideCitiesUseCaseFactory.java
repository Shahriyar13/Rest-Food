// Generated by Dagger (https://dagger.dev).
package com.example.template.di;

import com.example.template.domain.repository.cities.CitiesRepository;
import com.example.template.domain.usecase.cities.CitiesUseCase;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class UseCaseModule_ProvideCitiesUseCaseFactory implements Factory<CitiesUseCase> {
  private final UseCaseModule module;

  private final Provider<CitiesRepository> citiesRepositoryProvider;

  public UseCaseModule_ProvideCitiesUseCaseFactory(UseCaseModule module,
      Provider<CitiesRepository> citiesRepositoryProvider) {
    this.module = module;
    this.citiesRepositoryProvider = citiesRepositoryProvider;
  }

  @Override
  public CitiesUseCase get() {
    return provideCitiesUseCase(module, citiesRepositoryProvider.get());
  }

  public static UseCaseModule_ProvideCitiesUseCaseFactory create(UseCaseModule module,
      Provider<CitiesRepository> citiesRepositoryProvider) {
    return new UseCaseModule_ProvideCitiesUseCaseFactory(module, citiesRepositoryProvider);
  }

  public static CitiesUseCase provideCitiesUseCase(UseCaseModule instance,
      CitiesRepository citiesRepository) {
    return Preconditions.checkNotNullFromProvides(instance.provideCitiesUseCase(citiesRepository));
  }
}
