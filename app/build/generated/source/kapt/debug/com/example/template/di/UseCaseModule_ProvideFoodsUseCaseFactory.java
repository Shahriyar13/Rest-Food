// Generated by Dagger (https://dagger.dev).
package com.example.template.di;

import com.example.template.domain.repository.foods.FoodsRepository;
import com.example.template.domain.usecase.foods.FoodsUseCase;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class UseCaseModule_ProvideFoodsUseCaseFactory implements Factory<FoodsUseCase> {
  private final UseCaseModule module;

  private final Provider<FoodsRepository> foodsRepositoryProvider;

  public UseCaseModule_ProvideFoodsUseCaseFactory(UseCaseModule module,
      Provider<FoodsRepository> foodsRepositoryProvider) {
    this.module = module;
    this.foodsRepositoryProvider = foodsRepositoryProvider;
  }

  @Override
  public FoodsUseCase get() {
    return provideFoodsUseCase(module, foodsRepositoryProvider.get());
  }

  public static UseCaseModule_ProvideFoodsUseCaseFactory create(UseCaseModule module,
      Provider<FoodsRepository> foodsRepositoryProvider) {
    return new UseCaseModule_ProvideFoodsUseCaseFactory(module, foodsRepositoryProvider);
  }

  public static FoodsUseCase provideFoodsUseCase(UseCaseModule instance,
      FoodsRepository foodsRepository) {
    return Preconditions.checkNotNullFromProvides(instance.provideFoodsUseCase(foodsRepository));
  }
}
