// Generated by Dagger (https://dagger.dev).
package com.example.template.di;

import com.example.template.data.datasource.foods.FoodsLocalDataSource;
import com.example.template.domain.repository.foods.FoodsRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class Repository_ProvideFoodsRepositoryFactory implements Factory<FoodsRepository> {
  private final Repository module;

  private final Provider<FoodsLocalDataSource> foodsLocalDataSourceProvider;

  public Repository_ProvideFoodsRepositoryFactory(Repository module,
      Provider<FoodsLocalDataSource> foodsLocalDataSourceProvider) {
    this.module = module;
    this.foodsLocalDataSourceProvider = foodsLocalDataSourceProvider;
  }

  @Override
  public FoodsRepository get() {
    return provideFoodsRepository(module, foodsLocalDataSourceProvider.get());
  }

  public static Repository_ProvideFoodsRepositoryFactory create(Repository module,
      Provider<FoodsLocalDataSource> foodsLocalDataSourceProvider) {
    return new Repository_ProvideFoodsRepositoryFactory(module, foodsLocalDataSourceProvider);
  }

  public static FoodsRepository provideFoodsRepository(Repository instance,
      FoodsLocalDataSource foodsLocalDataSource) {
    return Preconditions.checkNotNullFromProvides(instance.provideFoodsRepository(foodsLocalDataSource));
  }
}
